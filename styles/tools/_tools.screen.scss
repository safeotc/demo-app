@mixin screen-rule($classname, $bp-divider, $generate-base-classname: true) {
  @if (type-of($classname) != string) {
    @error "`#{$classname}` needs to be a string.";
  }

  @if (type-of($bp-divider) != string) {
    @error "`#{$bp-divider}` needs to be a string.";
  }

  @if (type-of($generate-base-classname) != bool) {
    @error "`#{$generate-base-classname}` needs to be a boolean.";
  }

  @if ($generate-base-classname == true) {
    .#{$classname} {
      @content;
    }
  }

  $bp-names: map-keys($mq-breakpoints);
  $bp-length: length($bp-names);
  @for $i from 0 to $bp-length {
    @if ($i == 0) {
      @include mq($until: nth($bp-names, 1)) {
        .#{$classname}#{$bp-divider}#{$mq-base-breakpoint-name} {
          @content;
        }
      }
    } @else {
      $bp-name: nth($bp-names, $i);
      @if $i == $bp-length {
        @include mq($from: $bp-name) {
          .#{$classname}#{$bp-divider}#{$bp-name} {
            @content;
          }
        }
      } @else {
        $next-bp-name: nth($bp-names, $i + 1);
        @include mq($from: $bp-name, $until: $next-bp-name) {
          .#{$classname}#{$bp-divider}#{$bp-name} {
            @content;
          }
        }
      }
    }
  }
}
